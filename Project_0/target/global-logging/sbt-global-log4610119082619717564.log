[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Michael\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Michael\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.6 (Oracle Corporation Java 1.8.0_301)
[debug]       Load.loadUnit: plugins took 180.2447ms
[debug]       Load.loadUnit: defsScala took 0.6695ms
[debug] [Loading] Scanning directory C:\Users\Michael\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Michael\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 68.0472 ms
[debug]           Load.resolveProject(global-plugins) took 110.6903ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Michael\.sbt\1.0\plugins, plugins: List(<none>))) took 228.5921ms
[debug] [Loading] Done in C:\Users\Michael\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 265.3588ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6137ms
[debug]     Load.loadUnit(file:/C:/Users/Michael/.sbt/1.0/plugins/, ...) took 463.0537ms
[debug]   Load.apply: load took 883.2298ms
[debug]   Load.apply: resolveProjects took 10.6462ms
[debug]   Load.apply: finalTransforms took 147.4731ms
[debug]   Load.apply: config.delegates took 31.4281ms
[debug]   Load.apply: Def.make(settings)... took 990.7948ms
[debug]   Load.apply: structureIndex took 283.7516ms
[debug]   Load.apply: mkStreams took 8.7069ms
[info] loading global plugins from C:\Users\Michael\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 14898.9761ms
[debug]           Load.loadUnit: plugins took 134.5668ms
[debug]           Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\Michael\IdeaProjects\Project_0\project
[debug]             Load.loadUnit: mkEval took 22.1714ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Michael\IdeaProjects\Project_0\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.0169 ms
[info] loading settings for project project_0-build from idea.sbt ...
[debug]               Load.resolveProject(project_0-build) took 28.4547ms
[debug]             Load.loadTransitive: finalizeProject(Project(id project_0-build, base: C:\Users\Michael\IdeaProjects\Project_0\project, plugins: List(<none>))) took 33.4818ms
[debug] [Loading] Done in C:\Users\Michael\IdeaProjects\Project_0\project, returning: (project_0-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7866.3189ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.6105ms
[debug]         Load.loadUnit(file:/C:/Users/Michael/IdeaProjects/Project_0/project/, ...) took 8013.0725ms
[debug]       Load.apply: load took 8016.9138ms
[debug]       Load.apply: resolveProjects took 0.2449ms
[debug]       Load.apply: finalTransforms took 32.235ms
[debug]       Load.apply: config.delegates took 0.5623ms
[debug]       Load.apply: Def.make(settings)... took 249.3323ms
[debug]       Load.apply: structureIndex took 70.2149ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\Michael\IdeaProjects\Project_0\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 12325.9492ms
[debug]     Load.loadUnit: defsScala took 0.0105ms
[debug] [Loading] Scanning directory C:\Users\Michael\IdeaProjects\Project_0
[debug]       Load.loadUnit: mkEval took 1.7022ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.1311 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 137.2715ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Michael\IdeaProjects\Project_0, plugins: List(<none>))) took 152.4392ms
[debug] [Loading] Done in C:\Users\Michael\IdeaProjects\Project_0, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 9643.5452ms
[debug]     Load.loadUnit: cleanEvalClasses took 43.2182ms
[debug]   Load.loadUnit(file:/C:/Users/Michael/IdeaProjects/Project_0/, ...) took 22015.3424ms
[debug] Load.apply: load took 22023.0842ms
[debug] Load.apply: resolveProjects took 0.7636ms
[debug] Load.apply: finalTransforms took 108.227ms
[debug] Load.apply: config.delegates took 0.4569ms
[debug] Load.apply: Def.make(settings)... took 256.0247ms
[debug] Load.apply: structureIndex took 90.3685ms
[debug] Load.apply: mkStreams took 0.0121ms
[info] set current project to Project_0 (in build file:/C:/Users/Michael/IdeaProjects/Project_0/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62193 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62193, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Project_0 (in build file:/C:/Users/Michael/IdeaProjects/Project_0/)
[debug] > Exec(idea-shell, None, None)
